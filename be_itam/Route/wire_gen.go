// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package Route

import (
	"gorm.io/gorm"
	"itam/Controller"
	"itam/Repository"
	"itam/Services"
)

// Injectors from wire.go:

func assetDI(db *gorm.DB) *Controller.AssetControllerImpl {
	assetRepositoryImpl := Repository.AssetRepositoryProvider(db)
	assetServiceImpl := Services.AssetServiceControllerProvider(assetRepositoryImpl)
	assetControllerImpl := Controller.AssetControllerProvider(assetServiceImpl)
	return assetControllerImpl
}

// Asset Perangkat DI
func assetPerangkatDI(db *gorm.DB) *Controller.AssetPerangkatControllerImpl {
	assetPerangkatRepositoryImpl := Repository.AssetPerangkatRepositoryProvider(db)
	assetRepositoryImpl := Repository.AssetRepositoryProvider(db)
	assetPerangkatServiceImpl := Services.AssetPerangkatServiceProvider(assetPerangkatRepositoryImpl, assetRepositoryImpl)
	assetPerangkatControllerImpl := Controller.AssetPerangkatControllerProvider(assetPerangkatServiceImpl)
	return assetPerangkatControllerImpl
}

// Detail Asset Aplikasi DI
func AssetAplikasiDI(db *gorm.DB) *Controller.AssetAplikasiControllerImpl {
	assetAplikasiRepositoryImpl := Repository.AssetAplikasiRepositoryProvider(db)
	assetRepositoryImpl := Repository.AssetRepositoryProvider(db)
	assetAplikasiServiceImpl := Services.AssetAplikasiServiceProvider(assetAplikasiRepositoryImpl, assetRepositoryImpl)
	assetAplikasiControllerImpl := Controller.AssetAplikasiControllerProvider(assetAplikasiServiceImpl)
	return assetAplikasiControllerImpl
}

// Asset Hardware DI
func assetHardwareDI(db *gorm.DB) *Controller.AssetHardwareControllerImpl {
	assetHardwareRepositoryImpl := Repository.AssetHardwareRepositoryProvider(db)
	assetRepositoryImpl := Repository.AssetRepositoryProvider(db)
	assetHardwareServiceImpl := Services.AssetHardwareServiceProvider(assetHardwareRepositoryImpl, assetRepositoryImpl)
	assetHardwareControllerImpl := Controller.AssetHardwareControllerProvider(assetHardwareServiceImpl)
	return assetHardwareControllerImpl
}

// Detail Asset Lisensi DI
func AssetLisensiDI(db *gorm.DB) *Controller.AssetLisensiControllerImpl {
	assetLisensiRepositoryImpl := Repository.AssetLisensiRepositoryProvider(db)
	assetRepositoryImpl := Repository.AssetRepositoryProvider(db)
	assetLisensiServiceImpl := Services.AssetLisensiServiceProvider(assetLisensiRepositoryImpl, assetRepositoryImpl)
	assetLisensiControllerImpl := Controller.AssetLisensiControllerProvider(assetLisensiServiceImpl)
	return assetLisensiControllerImpl
}

// Vendor DI
func vendorDI(db *gorm.DB) *Controller.VendorControllerImpl {
	vendorRepositoryImpl := Repository.VendorRepositoryProvider(db)
	vendorServiceImpl := Services.VendorServiceProvider(vendorRepositoryImpl)
	vendorControllerImpl := Controller.VendorControllerProvider(vendorServiceImpl)
	return vendorControllerImpl
}

// User DI
func userDI(db *gorm.DB) *Controller.UserControllerImpl {
	userRepositoryImpl := Repository.UserRepositoryProvider(db)
	userServiceImpl := Services.UserServiceProvider(userRepositoryImpl)
	userControllerImpl := Controller.UserControllerProvider(userServiceImpl)
	return userControllerImpl
}

// Role DI
func roleDI(db *gorm.DB) *Controller.RoleControllerImpl {
	roleRepositoryImpl := Repository.RoleRepositoryProvider(db)
	roleServiceImpl := Services.RoleServiceControllerProvider(roleRepositoryImpl)
	roleControllerImpl := Controller.RoleControllerProvider(roleServiceImpl)
	return roleControllerImpl
}

// Divisi DI
func divisiDI(db *gorm.DB) *Controller.DivisiControllerImpl {
	divisiRepositoryImpl := Repository.DivisiRepositoryProvider(db)
	divisiServiceImpl := Services.DivisiServiceProvider(divisiRepositoryImpl)
	divisiControllerImpl := Controller.DivisiControllerProvider(divisiServiceImpl)
	return divisiControllerImpl
}
